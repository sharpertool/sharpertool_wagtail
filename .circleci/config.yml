version: 2.1
orbs:
  cypress: cypress-io/cypress@1.1.0

executors:
  container_config:
    working_directory: ~/build
    docker:
      - image: sharpertool/docker_ci_python3:1.5.1
        environment:
          ZIP_PREFIX: sharpertool


      - image: sharpertool/ci_postgis:1.0.1
        environment:
          POSTGRES_PASSWORD: testing-password
          POSTGRES_USER: django_user
          POSTGRES_DB: sharpertool

      - image: sharpertool/smtpd:1.0.1

  container_config_min:
    working_directory: ~/build
    docker:
      - image: sharpertool/docker_ci_python3:1.5.1
        environment:
          ZIP_PREFIX: sharpertool
          DEPLOY_BUCKET: sharpertool.deploy
          DEPLOY_BUCKET_PATH: backend_versions

references:

  workspace_root: &workspace_root
    ~/build

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

  restore_repo: &restore_repo
    restore_cache:
      keys:
        - v1-repo-{{ .Branch }}-{{ .Revision }}
        - v1-repo-{{ .Branch }}
        - v1-repo

  venv_cache_key: &venv_cache_key
    v2-dependency-venv-{{ checksum "requirements/test.txt" }}-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/base.txt" }}

  restore_venv: &restore_venv
    restore_cache:
      keys:
        - *venv_cache_key

  gulp_build_cache_key: &gulp_build_cache_key
    v1-gulp-build-{{ checksum "build_assets/package.json" }}

  restore_gulp_build_cache: &restore_gulp_build_cache
    restore_cache:
      keys:
        - *gulp_build_cache_key

  disable_strict_type_checking: &disable_strict_type_checking
    run:
      name: Disable strict type checking
      command: |
        mkdir ~/.ssh/
        echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

  persist_manifest: &persist_manifest
    persist_to_workspace:
          root: *workspace_root
          paths:
            - ./manifest.json

  store_manifest: &store_manifest
    store_artifacts:
      path: ./manfest.json
      destination: manifest.json

jobs:
  checkout_code:
    executor: container_config_min
    steps:
      - *restore_repo

      - run:
          name: Avoid hosts unknown for github
          command: |
            mkdir -p ~/.ssh/
            echo -e "Host github.com\n  StrictHostKeyChecking no\n" >> ~/.ssh/config

      - run:
          name: fetch tags
          command: |
            git fetch --tags || true

      - checkout

      - run:
          name: fetch tags
          command: |
            git fetch --tags || true

      - save_cache:
          key: v1-repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .

  build_venv:
    executor: container_config_min
    steps:
      - *restore_repo
      - *restore_venv

      - run:
          name: Install project pip modules
          command: |
            python3 -m venv .venv
            source .venv/bin/activate
            pip install -U pip
            pip install -r requirements/test.txt

      - save_cache:
          key: *venv_cache_key
          paths:
            - .venv

  compile_assets:
    executor: container_config_min
    steps:
      - *restore_repo
      - *restore_venv
      - *restore_gulp_build_cache
      - *attach_workspace

      - run:
          name: Install npm packages for gulp_build
          command: |
            cd build_assets
            yarn install

      - run:
          name: Show initial contents of static location
          command: |
            ls -al ./sharpertool/sharpertool/static || true
            ls -al ./collectedstatic || true

      - run:
          name: Build CSS Assets using Gulp
          command: |
            cd build_assets
            environment=circleci yarn build

      - run:
          name: Show compiled contents of static location
          command: |
            ls -al ./sharpertool/sharpertool/static || true
            ls -al ./collectedstatic || true

      - save_cache:
          key: *gulp_build_cache_key
          paths:
            - build_assets/node_modules

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - ./sharpertool/static
            - ./collectedstatic

  collectstatic:
    executor: container_config_min
    steps:
      - *restore_repo
      - *restore_venv

      - *attach_workspace

      - run:
          name: Show compiled contents of static location
          command: |
            ls -al ./sharpertool/static || true

      - run:
          name: Collect static files
          command: |
            source .venv/bin/activate
            cd sharpertool
            export DJANGO_SETTINGS_MODULE=sharpertool.settings.circleci
            python manage.py collectstatic --noinput --ignore=*.scss

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - ./collectedstatic

  pytest:
    executor: container_config
    steps:
      - *restore_repo
      - *restore_venv
      - *attach_workspace

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          command: |
            source .venv/bin/activate
            cd sharpertool
            DJANGO_SETTINGS_MODULE=sharpertool.settings.circleci python manage.py test

  build_zip_file:
    executor: container_config_min
    steps:
      - *restore_repo
      - *restore_venv
      - *attach_workspace

      - run:
          name: Build zip deploy file and persist to workspace
          command: |
            mkdir -p zipout
            zipfile=$(./ci_scripts/zipfilename.sh)
            zip -r zipout/${zipfile} \
              collectedstatic/ *.wsgi sharpertool/ scripts/ \
              requirements/ requirements.txt \
              -x \*.pyc -x sharpertool/local_config.py \
              -x sharperool/.env.local -x sharpertool/.env.test

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - ./zipout

  deploy_to_s3_bucket:
    executor: container_config_min
    steps:
      - *restore_repo
      - *restore_venv
      - *attach_workspace

      - run:
          name: Deploy the zip file to the remote bucket
          command: |
            pwd
            ls -al zipout
            zipfile=$(ls zipout/)
            echo "Deploying ${zipfile} to S3"
            VERSION=${CIRCLE_TAG:-${CIRCLE_SHA1}}
            s3path="s3://${DEPLOY_BUCKET}/${DEPLOY_BUCKET_PATH}/${zipfile}"
            aws s3 cp zipout/${zipfile} ${s3path}

  deploy_to_server:
    executor: container_config_min
    steps:
      - *restore_repo
      - *disable_strict_type_checking
      - *attach_workspace

      - run:
          name: Add My IP to Digial Ocean Firewall
          command: |
            python ./ci_scripts/update_digitalocean_firewall_rules.py ${FIREWALL_ID}
            sleep 5

      - run:
          name: Add Target Host to config to disable strict type checking
          command: |
            ./ci_scripts/host_config.sh ${DEPLOY_HOST} --user django

      - run:
          name: Show current config value.
          command: |
            ls -al ~
            if [[ -d ~/.ssh ]];then
              cat ~/.ssh/config
            fi

#      - run:
#          name: Copy deploy script to server
#          command: |
#            ./ci_scripts/copy_deploy_script.sh
#          environment:
#            BASE_DIR: /home/django/sharpertool
#            SRC_SCRIPT: site_deploy_zip.sh

      - run:
          name: Copy zipfile to server
          command: |
            zipfile=$(ls zipout/)
            ssh deploy_host "mkdir -p ${APP_DIR}/deploy/"
            scp zipout/${zipfile} deploy_host:${APP_DIR}/deploy
          environment:
            APP_DIR: /home/django/sharpertool

      - run:
          name: Run deploy script on server
          command: |
            zipfile=$(ls zipout/)
            echo "Deploying zipfile ${zipfile} on server"
            timestamp=$(date +%Y-%m-%d)
            export VERSION=${CIRCLE_TAG:-${timestamp}_${CIRCLE_SHA1}}
            echo "Updating the version to ${VERSION}"
            ssh deploy_host \
              "${APP_DIR}/site_deploy_zip.sh ${zipfile} ${VERSION}"
          environment:
            APP_DIR: /home/django/sharpertool

      - run:
          name: Remove My IP from Digital Ocean Firewall
          command: |
            python ./ci_scripts/update_digitalocean_firewall_rules.py ${FIREWALL_ID} --remove
          when: always


workflows:
  version: 2

  build_test_deploy:
    jobs:
      - checkout_code:
          filters:
            tags:
              only: /v.*/
            branches:
              ignore:
                - develop_ci_test
                - packer_test

      - build_venv:
          requires:
            - checkout_code
          filters:
            tags:
              only: /v.*/

      - compile_assets:
          requires:
            - build_venv
          filters:
            tags:
              only: /v.*/

      - collectstatic:
          requires:
            - compile_assets
          filters:
            tags:
              only: /v.*/

      - pytest:
          requires:
            - build_venv
            - collectstatic
          filters:
            tags:
              only: /v.*/

      - build_zip_file:
          requires:
            - build_venv
            - collectstatic
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - develop

      - deploy_to_s3_bucket:
          requires:
            - build_zip_file
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(-rc.*)?$/
            branches:
              only:
                - develop

      - deploy_to_server:
          requires:
            - build_zip_file
          filters:
            tags:
              only: /v.*-rc.*/
            branches:
              only:
                - develop

